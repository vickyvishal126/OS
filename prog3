#include <stdio.h>

struct Process {
    int processID;
    int arrivalTime;
    int burstTime;
};

void calculateWaitingTime(struct Process processes[], int n, int waitingTime[]) {
    waitingTime[0] = 0; 

    for (int i = 1; i < n; i++) {
        waitingTime[i] = waitingTime[i - 1] + processes[i - 1].burstTime;
    }
}

void calculateTurnaroundTime(struct Process processes[], int n, int waitingTime[], int turnaroundTime[]) {
    for (int i = 0; i < n; i++) {
        turnaroundTime[i] = waitingTime[i] + processes[i].burstTime;
    }
}

void calculateAverageTimes(struct Process processes[], int n) {
    int waitingTime[n], turnaroundTime[n];

    calculateWaitingTime(processes, n, waitingTime);
    calculateTurnaroundTime(processes, n, waitingTime, turnaroundTime);

    double totalWaitingTime = 0, totalTurnaroundTime = 0;

    for (int i = 0; i < n; i++) {
        totalWaitingTime += waitingTime[i];
        totalTurnaroundTime += turnaroundTime[i];
    }

    double averageWaitingTime = totalWaitingTime / n;
    double averageTurnaroundTime = totalTurnaroundTime / n;

    printf("Average Waiting Time: %.2f\n", averageWaitingTime);
    printf("Average Turnaround Time: %.2f\n", averageTurnaroundTime);
}

void displayGanttChart(struct Process processes[], int n) {
    printf("\nGantt Chart:\n");
    printf("-----------------------------------------------------------\n");
    printf("| Process ID | Arrival Time | Burst Time | Waiting Time |\n");
    printf("-----------------------------------------------------------\n");

    for (int i = 0; i < n; i++) {
        printf("| %11d | %13d | %10d | %13d |\n",
               processes[i].processID, processes[i].arrivalTime,
               processes[i].burstTime, (i == 0) ? 0 : (i - 1));
    }

    printf("-----------------------------------------------------------\n");
}

int main() {
    int n;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    printf("Enter the arrival time and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].processID = i + 1;
        processes[i].arrivalTime = 0; 
        printf("Process %d: ", i + 1);
        scanf("%d", &processes[i].burstTime);
    }

    calculateAverageTimes(processes, n);
    displayGanttChart(processes, n);

    return 0;
}
